<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- Member 테이블에 대한 CRUD 기능을 구현하기 위한 Mapper -->
<mapper namespace="EpisodeMapper">
	
	<!-- Beans 클래스의 객체이름(id)과 클래스 이름(type)를 명시한다. -->
	<resultMap type="study.jsp.bookstory.model.Episode" id="Episode">
	<!-- 빈즈의 멤버 변수(property) 이름과 대상테이블의 컬럼(column)을 연결한다-->
		<result property="id" column="id"/>
		<result property="episode_name" column="episode_name"/>
		<result property="hit" column="hit"/>
		<result property="content" column="content"/>
		<result property="reg_date" column="reg_date"/>
		<result property="edit_date" column="edit_date"/>
		<result property="author_comment" column="author_comment"/>
		<result property="episode_buy" column="episode_buy"/>
		<result property="episode_rent" column="episode_rent"/>
		<result property="book_id" column="book_id"/>
		<result property="episode_order" column="episode_order"/>
		<result property="total_star" column="total_star"/>
		<result property="total_starcount" column="total_starcount"/>
		<result property="imagePath" column="imagePath"/>
		<result property="total_bookmark" column="total_bookmark"/>
	</resultMap>



	<!-- 에피소드 등록 -->
	<insert id="insertEpisode" parameterType="study.jsp.bookstory.model.Episode" useGeneratedKeys="true" keyProperty="id">
	INSERT INTO episode(episode_name, hit, content, reg_date, edit_date, author_comment, episode_buy, episode_rent, 
						book_id, episode_order, total_star, total_starcount)
	VALUES(#{episode_name}, 0, #{content}, now(), now(), #{author_comment}, 200, 100, #{book_id}, #{episode_order},0,0)
	</insert> 
	
	<!-- 같은 이름의 작품이 있는지 검사 
			파라미터와 DB의 book_name 칼럼의 공백 제거 -->
	<select id="countEqualEpisodeName" parameterType="study.jsp.bookstory.model.Episode" resultType="int">
		select count(episode_name) from episode where replace(episode_name,' ','')= #{episode_name}
	</select>
	
	<!-- 그 작품 에피소드의 총 작품 수 -->
	<select id="countTotalEpisodeByBookId" parameterType="study.jsp.bookstory.model.Episode" resultType="int">
		SELECT COUNT(id) FROM episode where book_id=#{book_id}
	</select>
	
	
	<!-- 에피소드 리스트 -->
	<select id="selectEpisdoeListAllByBook" parameterType="study.jsp.bookstory.model.Episode" resultMap="Episode">
		SELECT id, episode_name, hit, DATE_FORMAT(reg_date, '%Y-%m-%d') as reg_date, edit_date, author_comment, episode_buy,
				episode_rent, book_id, episode_order, total_star, total_starcount,
				(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE episode_id=episode.id AND content_type LIKE ('image/%') AND image_type='episode'
				ORDER BY id ASC LIMIT 0, 1) as imagePath
		FROM episode WHERE book_id=#{book_id}
		ORDER BY episode_order DESC
		LIMIT #{limitStart},#{listCount}
	</select>
	
	
	<!-- 작품의 에피소드 첫화 -->
	
	<select id="selectFirstEpisodeIdByBookId" parameterType="study.jsp.bookstory.model.Episode" resultType="int">
		SELECT id FROM episode WHERE book_id=#{book_id} AND episode_order = 1
	</select>
	
	<!-- 한개의 Episode Select -->
	<select id="selectOneEpisodeItem" parameterType="study.jsp.bookstory.model.Episode" resultMap="Episode">
		SELECT id, episode_name, content, hit, DATE_FORMAT(reg_date, '%Y-%m-%d') as reg_date, edit_date, author_comment, episode_buy,
				episode_rent, book_id, episode_order, total_star, total_starcount
		FROM episode WHERE id=#{id}
	</select>
	
	<!-- 에피소드 제목 불러오기(셀렉트 박스용) -->
	<select id="selectAllEpisodeTitle" parameterType="study.jsp.bookstory.model.Episode" resultMap="Episode">
		SELECT id, episode_name, episode_order FROM episode WHERE book_id=#{book_id} ORDER BY episode_order DESC
	</select>
	
	
	<!-- 에피소드에 별점 참여 회원수와 별점 평균 update -->
	<update id="updateStarCountAndAvg" parameterType="study.jsp.bookstory.model.Episode">
	UPDATE episode SET total_star=#{total_star}, total_starcount=#{total_starcount} WHERE id=#{id}
	</update>
	
	
	
	
	

</mapper>