<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 => Impl클래스를 대체한다. -->
<mapper namespace="MemberMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap type="study.jsp.bookstory.model.Member" id="member">
	    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
	    <result property="id" column="id"/>
	    <result property="nick_name" column="nick_name"/>
	    <result property="birthdate" column="birthdate"/>
	    <result property="name" column="name" />
	    <result property="user_id" column="user_id" />
	    <result property="user_pw" column="user_pw"/>
	    <result property="email" column="email"/>
	    <result property="gender" column="gender"/>
	    <result property="tel" column="tel"/>
	    <result property="point" column="point"/>
	    <result property="reg_date" column="reg_date"/>
	    <result property="edit_date" column="edit_date"/>
	    <result property="member_level" column="member_level"/>
	</resultMap>
	
	<!-- 아이디 중복검사를 수행한다. -->
	<select id="selectUserIdCount" parameterType="study.jsp.bookstory.model.Member" resultType="int">
	  SELECT count(id) FROM member WHERE user_id=#{user_id}
	</select>
	
	<!-- 이메일 중복검사를 수행한다. -->
	<select id="selectEmailCount" parameterType="study.jsp.bookstory.model.Member" resultType="int">
	  SELECT count(id) FROM member WHERE email=#{email}
	</select>
	
	<!-- 닉네임 중복검사를 수행한다. -->
	<select id="selectNickNameCount" parameterType="study.jsp.bookstory.model.Member" resultType="int">
	  SELECT count(id) FROM member WHERE nick_name=#{nick_name}
	</select>
	
	<!-- 회원정보를 저장한다 : 가입 -->
	<insert id="insertMember" parameterType="study.jsp.bookstory.model.Member" useGeneratedKeys="true" keyProperty="id">
	  INSERT INTO member(
	    nick_name, birthdate, name, user_id, user_pw,
	    email, gender, tel,
	    point, reg_date, edit_date, member_level
	  ) VALUES (
	    #{nick_name}, #{birthdate}, #{name}, #{user_id}, password(#{user_pw}),
	    #{email}, #{gender}, #{tel},
	    1000, now(), now(), "AA"
	  )
	</insert>
	
	<!-- 아이디와 비밀번호가 일치하는 회원정보를 조회한다. -->
	<select id="selectLoginInfo" parameterType="study.jsp.bookstory.model.Member" resultMap="member">
	  SELECT
	      id, nick_name, DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate, name, user_id, user_pw, email, gender,
	      tel, point, reg_date, edit_date, member_level
	  FROM member
	  WHERE user_id=#{user_id} AND user_pw=password(#{user_pw})
	  ORDER BY id DESC
	  LIMIT 0, 1
	</select>
	
	<!-- 비밀번호 재발급: 이메일주소가 일치하는 비밀번호를 변경한다. -->
	<update id="updateMemberPasswordByEmail" parameterType="study.jsp.bookstory.model.Member">
	  UPDATE member SET user_pw=password(#{user_pw}), edit_date=now()
	  WHERE email=#{email};
	</update>
	
	<!-- 현재 로그인 중인 회원의 비밀번호를 검사한다. -->
	<select id="selectMemberPasswordCount" parameterType="study.jsp.bookstory.model.Member" resultType="int">
	  SELECT count(id) FROM member
	  WHERE id=#{id} AND user_pw=password(#{user_pw})
	</select>
	
	<!-- 회원정보를 삭제한다 : 탈퇴 -->
	<delete id="deleteMember" parameterType="study.jsp.bookstory.model.Member">
	  DELETE FROM member WHERE id=#{id};
	</delete>
	
	<!-- 회원정보를 변경한다. -->
	<update id="updateMember" parameterType="study.jsp.bookstory.model.Member">
	  UPDATE member SET nick_name=#{nick_name}, birthdate=#{birthdate}, name=#{name}, email=#{email}, gender=#{gender}, tel=#{tel}, edit_date=now()
	  <if test="new_user_pw != null and new_user_pw != ''">
	  ,user_pw=password(#{new_user_pw})
	  </if>
	  
	  WHERE id=#{id}
	</update>
	
	<!-- 일련번호에 의한 회원정보 조회  -->
	<select id="selectMember" parameterType="study.jsp.bookstory.model.Member" resultMap="member">
	  SELECT
	      id, nick_name, DATE_FORMAT(birthdate, '%Y-%m-%d') AS birthdate, name, user_id, user_pw, email, gender,
	      tel, point, reg_date, edit_date, member_level
	  FROM member
	  WHERE id=#{id}
	</select>
	
	<!-- 회원의 포인트 조회 -->
	<select id="selectMyPointByMemberId" parameterType="study.jsp.bookstory.model.Member" resultType="int">
	SELECT point FROM member WHERE id=#{id}
	</select>
	
	<!-- 회원의 포인트 충전 및 환불-->
	<update id="updateMyPointByMemberId" parameterType="study.jsp.bookstory.model.Member">
	UPDATE member SET point = #{point} WHERE id=#{id} 
	</update>
	
	<!-- 회원의 포인트 차감 -->
	<update id="updateMyPointByBuyBook" parameterType="study.jsp.bookstory.model.Member">
	UPDATE member SET point = #{point} WHERE id=#{id} 
	</update>
	
</mapper>