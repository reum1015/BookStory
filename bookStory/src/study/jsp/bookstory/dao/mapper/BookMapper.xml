<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- Member 테이블에 대한 CRUD 기능을 구현하기 위한 Mapper -->
<mapper namespace="BookMapper">
	
	<!-- Beans 클래스의 객체이름(id)과 클래스 이름(type)를 명시한다. -->
	<resultMap type="study.jsp.bookstory.model.Book" id="book">
	<!-- 빈즈의 멤버 변수(property) 이름과 대상테이블의 컬럼(column)을 연결한다-->
		<result property="id" column="id"/>
		<result property="book_name" column="book_name"/>
		<result property="book_author" column="book_author"/>
		<result property="daily_date" column="daily_date"/>
		<result property="total_hit" column="total_hit"/>
		<result property="intro" column="intro"/>
		<result property="genre" column="genre"/>
		<result property="reg_date" column="reg_date"/>
		<result property="edit_date" column="edit_date"/>
		<result property="total_point" column="total_point"/>
		<result property="rent_point" column="rent_point"/>
		<result property="book_end" column="book_end"/>
		<result property="total_favorite" column="total_favorite"/>
		<result property="total_star" column="total_star"/>
		<result property="imagePath" column="imagePath"/>
		<result property="imagePathCarousel" column="imagePathCarousel"/>
		<result property="totalEpisodeCount" column="totalEpisodeCount"/>
		<result property="order" column="order"/>
	</resultMap>



	<!-- 작품 하나 가져오기 -->
	<select id="selectOneBookItem" parameterType="study.jsp.bookstory.model.Book" resultMap="book">
	SELECT id,book_name, book_author, daily_date, intro, genre, total_point, 
			rent_point, book_end, total_favorite, total_star, (SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='main'
			ORDER BY id ASC LIMIT 0, 1) AS imagePath,
			(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='carousel'
			ORDER BY id ASC LIMIT 0, 1) AS imagePathCarousel
	FROM book
	WHERE id = #{id}
	</select>


	<!-- 작품 등록 -->
	<insert id="insertBook" parameterType="study.jsp.bookstory.model.Book" useGeneratedKeys="true" keyProperty="id">
	INSERT INTO book(book_name, book_author,total_hit,intro,genre,
										reg_date,edit_date,total_point,rent_point,book_end,total_favorite,daily_date,total_star)
	VALUES(#{book_name}, #{book_author},0, #{intro}, #{genre},
					now(),now(),0,0,"N",0,#{daily_date},0)
	</insert>
	
	<!-- 같은 이름의 작품이 있는지 검사 
			파라미터와 DB의 book_name 칼럼의 공백 제거 -->
	<select id="countEqualBookName" parameterType="study.jsp.bookstory.model.Book" resultType="int">
		SELECT COUNT(book_name) FROM book where replace(book_name,' ','')= #{book_name} 
	</select>
	
	
	<!-- 작품 검색(관리자 에피소드 업로드용) -->
	<select id="searchBookItemList" parameterType="study.jsp.bookstory.model.Book" resultMap="book">
		SELECT id, book_name, book_author, daily_date, genre,
		(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='main'
			ORDER BY id ASC LIMIT 0, 1) as imagePath
		FROM book
		WHERE replace(book_name,' ','') like concat('%', #{book_name}, '%')
		OR replace(book_author,' ','') like concat('%', #{book_name}, '%')
	</select>
	
	
	<!-- 메인 페이지 캐러셀(랜덤으로 3개의 작품 불러오기) -->
	<select id="selectMainCarouselByRandomThree" resultMap="book">
		SELECT id, book_name, book_author, daily_date, genre,
		(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='carousel'
		ORDER BY id ASC LIMIT 0, 1) as imagePath
		FROM book  order by rand() limit 3;
	</select>
	
	<!-- 메인 장르별 추천작 4개 -->
	<select id="selectListMainByGenre" resultMap="book">
	SELECT id, book_name, book_author, daily_date, genre, total_hit,intro,total_star,total_favorite,
		(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='main'
		ORDER BY id ASC LIMIT 0, 1) as imagePath,
		(SELECT COUNT(id) FROM episode WHERE book.id=book_id) AS totalEpisodeCount
		FROM book 
		WHERE genre=#{genre}
		ORDER BY total_hit DESC
		limit 0,4;
	</select>
	
	<!-- 장르별 List-->
	<select id="selectListByGenre" resultMap="book">
	SELECT id, book_name, book_author, daily_date, genre, total_hit,intro,total_star,total_favorite,
		(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='main'
		ORDER BY id ASC LIMIT 0, 1) as imagePath,
		(SELECT COUNT(id) FROM episode WHERE book.id=book_id) AS totalEpisodeCount
		FROM book 
		WHERE genre=#{genre}
		ORDER BY
	<choose>
		<when test="order == 'title'">
			book_name
		</when>
		<when test="order == 'star'">
			total_star DESC
		</when>
		<when test="order == 'like'">
			total_favorite DESC
		</when>
		<when test="order == 'read'">
			total_hit DESC
		</when>
		<otherwise>
			total_hit
		</otherwise>
	</choose>
	</select>
	
	
	
	<!-- 관심등록 회원 수 +1 -->
	<update id="updateTotalFavoritePlus" parameterType="study.jsp.bookstory.model.Book">
		UPDATE book SET total_favorite=total_favorite+1 WHERE id = #{id}
	</update>
	
	<!-- 관심등록 회원 수 -1 -->
	<update id="updateTotalFavoriteMinus" parameterType="study.jsp.bookstory.model.Book">
		UPDATE book SET total_favorite=total_favorite-1 WHERE id = #{id}
	</update>
	
	<!-- 작품테이블에 별점 평균 정보 입력 -->
	<update id="updateStarAvg" parameterType="study.jsp.bookstory.model.Book">
		UPDATE book SET total_star=(select truncate(avg(star_point),2) FROM starmark WHERE book_id = #{id}) where id=#{id}
	</update>
	
	<!-- 메인 남여별 인기작 리스트(여) -->
	<select id="selectListForMainByGenderFemale" resultMap="book">
	select b.id, b.book_name, b.book_author,(SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=b.id AND content_type LIKE ('image/%') AND image_type='main' ORDER BY id ASC LIMIT 0, 1) 
		AS imagePath
			from book b
			where b.id in (
			select f.book_id from favorite f
			where f.gender = 'F'
			group by f.book_id
			order by count(f.book_id) desc)
			limit 0,6;
	</select>
	
		<!-- 메인 남여별 인기작 리스트(남) -->
	<select id="selectListForMainByGenderMale" resultMap="book">
	select b.id, b.book_name, b.book_author, (SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=b.id AND content_type LIKE ('image/%') AND image_type='main' ORDER BY id ASC LIMIT 0, 1) 
		AS imagePath
			from book b
			where b.id in (
			select f.book_id from favorite f
			where f.gender = 'M'
			group by f.book_id
			order by count(f.book_id) desc)
			limit 0,6;
	</select>
	
	<!-- TodayNovel 오늘요일 작품 리스트 불러오기 -->
	<select id="selectNovelListByDay" parameterType="study.jsp.bookstory.model.Book" resultMap="book">
	SELECT id, book_name, book_author, daily_date, intro, genre, total_hit,
			rent_point, book_end, total_favorite, total_star, (SELECT concat(file_dir, '/', file_name) FROM imagefile WHERE book_id=book.id AND content_type LIKE ('image/%') AND image_type='main'
			ORDER BY id ASC LIMIT 0, 1) AS imagePath,
			(SELECT COUNT(id) FROM episode WHERE book.id=book_id) AS totalEpisodeCount
	FROM book
	WHERE daily_date = #{daily_date}
	ORDER BY
	<choose>
		<when test="order == 'title'">
			book_name
		</when>
		<when test="order == 'star'">
			total_star DESC
		</when>
		<when test="order == 'like'">
			total_favorite DESC
		</when>
		<when test="order == 'read'">
			total_hit DESC
		</when>
		<otherwise>
			total_hit DESC
		</otherwise>
	</choose>
	</select>
	
	<!-- 에피소드 올릴때 마다 총 대여 포인트 총 구매 포인트 합계 누적 -->
	<update id="updateTotalBuyAndRentPointForBook" parameterType="study.jsp.bookstory.model.Book">
	UPDATE book SET total_point = total_point + 200, rent_point = rent_point + 100
	WHERE id=#{id}
	</update>
	
	<!-- 작품에 대한 총 구매 포인트와 총 렌트 포인트 조회 -->
	<select id="selectTotalPointFromBook" parameterType="study.jsp.bookstory.model.Book" resultMap="book">
	SELECT total_point, rent_point FROM book
	WHERE id=#{id}
	</select>
	
	<!-- 작품의 총 조회 수 +1-->
	<update id="updateBookHit" parameterType="study.jsp.bookstory.model.Book">
		UPDATE book SET total_hit=total_hit+1 WHERE id=#{id}
	</update>
	
	<!-- 연령대 별 랭킹(메인) -->
	<select id="selectRankListByAge" parameterType="int" resultMap="book">
		SELECT id,book_name,genre FROM book
		WHERE id in(
		SELECT book_id FROM favorite
					WHERE if(date_format(now(),'%Y')-substring(birthdate,1,4)between #{age} and (#{age}+9),1,0)
					GROUP BY book_id
					ORDER BY count(book_id) DESC
		)
		limit 0,10;
	</select>
	
	<!-- 모든 작품 리스트 -->
	<select id="selectAllBookList" parameterType="study.jsp.bookstory.model.Book" resultMap="book">
	SELECT id,book_name, book_author, daily_date, intro, genre, total_point, 
			rent_point, book_end, total_favorite, total_star, reg_date,
			(SELECT COUNT(id) FROM episode WHERE book.id=book_id) AS totalEpisodeCount
	FROM book
	</select>
	
	
	<!-- 작품 수정 -->
	<update id="updateBook" parameterType="study.jsp.bookstory.model.Book">
	UPDATE book SET
		book_name=#{book_name}, book_author=#{book_author}, genre=#{genre}, daily_date=#{daily_date},
		intro=#{intro}, edit_date=now()
	WHERE id=#{id}
	</update>
	
	
	
	
</mapper>